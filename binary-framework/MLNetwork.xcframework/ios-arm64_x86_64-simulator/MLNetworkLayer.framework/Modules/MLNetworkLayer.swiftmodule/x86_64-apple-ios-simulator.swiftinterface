// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MLNetworkLayer
import Combine
import Foundation
import Swift
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol MLNetworkProtocol {
  var session: Foundation.URLSession { get }
  func makeRequest<T>(with builder: MLNetworkLayer.RequestBuilder, decodingType: T.Type, queue: Dispatch.DispatchQueue, retries: Swift.Int) throws -> Combine.AnyPublisher<T, Swift.Error> where T : Swift.Decodable, T : Swift.Encodable
}
public protocol RequestProtocol {
  var baseURL: Foundation.URL { get }
  var path: Swift.String? { get }
  var method: MLNetworkLayer.HTTPMethod { get }
  var headers: [Swift.String : Swift.String]? { get }
  var parameters: MLNetworkLayer.RequestParameters? { get }
}
final public class DefaultRequestBuilder : MLNetworkLayer.RequestBuilder {
  public init(request: MLNetworkLayer.RequestProtocol)
  public init(with baseURL: Foundation.URL, path: Swift.String? = nil)
  @discardableResult
  final public func set(method: MLNetworkLayer.HTTPMethod) -> Self
  @discardableResult
  final public func set(path: Swift.String?) -> Self
  @discardableResult
  final public func set(headers: [Swift.String : Swift.String]?) -> Self
  @discardableResult
  final public func set(parameters: MLNetworkLayer.RequestParameters?) -> Self
  final public func build() throws -> Foundation.URLRequest
  @objc deinit
}
public protocol RequestBuilder {
  init(request: MLNetworkLayer.RequestProtocol)
  init(with baseURL: Foundation.URL, path: Swift.String?)
  @discardableResult
  func set(method: MLNetworkLayer.HTTPMethod) -> Self
  @discardableResult
  func set(path: Swift.String?) -> Self
  @discardableResult
  func set(headers: [Swift.String : Swift.String]?) -> Self
  @discardableResult
  func set(parameters: MLNetworkLayer.RequestParameters?) -> Self
  func build() throws -> Foundation.URLRequest
}
public enum RequestParameters {
  case body([Swift.String : Any]?)
  case url([Swift.String : Swift.String]?)
}
public enum APIError : Swift.Error {
  case requestFailed
  case jsonConversionFailure
  case invalidData
  case responseUnsuccessful
  case jsonParsingFailure
  public static func == (a: MLNetworkLayer.APIError, b: MLNetworkLayer.APIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MLNetworkLayer.HTTPMethod : Swift.Equatable {}
extension MLNetworkLayer.HTTPMethod : Swift.Hashable {}
extension MLNetworkLayer.HTTPMethod : Swift.RawRepresentable {}
extension MLNetworkLayer.APIError : Swift.Equatable {}
extension MLNetworkLayer.APIError : Swift.Hashable {}
